Two Sum

Given an array of integers, return the indices
of the two numbers that add up to a given target.

[1, 3, 7, 9, 2]     target = 11
 0  1  2  3  4                      solution = [3, 4]


Step 1: Questions

        Thinking about all edge cases.

        1. Are all of the numbers positive or can there be negatives?

        2. Are there duplicate numbers in the array?

        3. Will there always be a solution available?
            [1, 3, 7, 9 2]      target = 25     no solution
            []                  target = 25     no solution
            [5]                 target = 25     no solution

        3.1. What do we return if there is no solution?
            -1 or [ ] or NULL

        4. Can there be multiple pairs that add up to the target?
            [1, 3, 7, 9, 2, 4]      target = 11
             0  1  2  3  4  5                       solution = [[2, 5], [3, 4]]


Step 2: Write out some test cases

        Best case test case:

        [1, 3, 7, 9, 2]     target = 11
         0  1  2  3  4                      solution = [3, 4]

        [1, 3, 7, 9, 2]     target = 25     null

        []                  target = 1      null

        [5]                 target = 5      null

        [1, 6]              target = 7
        0  1                               solution = [0, 1]


Step 3: Figure out a solution without code

        Only critically and logically solution

        Try every single possible combination of pairs that exists inside of the array.
        Walking through 2-pointer-technique

1. Walktrough:

        nums = [1, 3, 7, 9, 2]      target = 11
                0  1  2  3  4
                |  |
                p1 p2

        numberToFind = target - nums[p1]
            10       =    11  -    1

        Iterate p2 over array to find number 10

2. Walktrough:

        nums = [-, 3, 7, 9, 2]      target = 11
                0  1  2  3  4
                |  |
                p1 p2

        numberToFind = target - nums[p1]
            8       =    11  -    3

        Iterate p2 over array to find number 8

3. Walktrough:

        nums = [-, -, 7, 9, 2]      target = 11
                0  1  2  3  4
                    |  |
                    p1 p2

        numberToFind = target - nums[p1]
            4       =    11  -    7

        Iterate p2 over array to find number 4

4. Walktrough:

        nums = [-, -, -, 9, 2]      target = 11
                0  1  2  3  4
                        |  |
                        p1 p2

        numberToFind = target - nums[p1]
            2       =    11  -    9

        Iterate p2 over array to find number 2

        Number found at index 4

        Solution = [3, 4]


Step 4: Writing the code

        JavaScript-Code:

        const findTwoSum = function(nums, target)
        {
            for (let p1 = 0; p1 < nums.length; p++)
            {
                const numberToFind = target - nums[p1];

                for (p2 = p1 + 1; p2 < nums.length; p2++)
                {
                    if (numberToFind === nums[p2])
                        return [p1, p2];
                }
            }

            // no solution
            return null;
        }


Step 5: Important: Double check for errors !!!

        To see if you are a careful and cautious coder!

        No typos, spelling mistakes, variable names, cases are correct, close all loops and functions,


Step 6: Test our code with test cases

        Best case test case:

        [1, 3, 7, 9, 2]     target = 11
         0  1  2  3  4                      solution = [3, 4]

        JavaScript-Code:

        const findTwoSum = function(nums, target)
        {
            for (let p1 = 0; p1 < nums.length; p++)             p1 = 0                  p1 = 1              p1 = 2          p1 = 3
            {
                const numberToFind = target - nums[p1];         nTF = 10                nTF = 8             nTF = 4         nTF = 2

                for (p2 = p1 + 1; p2 < nums.length; p2++)       p2 = 1 -> 2 -> 3 -> 4   p2 = 2 -> 3 -> 4    p2 = 3 -> 4     p2 = 4
                {
                    if (numberToFind === nums[p2])                                                                          2 === 2
                        return [p1, p2];                                                                                    [ 3, 4 ]
                }
            }

            // no solution
            return null;
        }


        const findTwoSum = function(nums, target)               [ ]         [5]
        {
            for (let p1 = 0; p1 < nums.length; p++)             p1 = 0      p1 = 0      p1 = 1
            {
                const numberToFind = target - nums[p1];         nTF = -     nTF = 6     nTF = -

                for (p2 = p1 + 1; p2 < nums.length; p2++)       p2 = -      p2 = -      p2 = -
                {
                    if (numberToFind === nums[p2])
                        return [p1, p2];
                }
            }

            // no solution
            return null;                                        null                    null
        }


Step 7: Big O-Notation (Time / Space complexity)


        Check Time complexity:

        - 2 for-loops
        - 1st for-loop iterates over every single element in the array
            -> time complexity O(n)
        - 2nd for-loop iterates also over every single element in the array
          (also on the left side are elements not taken -> relative relationship)
            -> time complexity O(n)
        - 2nd for-loop is inside 1st for-loop
            -> time complexity O(n²)

        Relative relationship => if there are added 4 more elements you have to
                                 iterate 4 times more

        Solution of time complexity: O(n²) => quadratic


        Check Space complexity:

        - only we do reseting variables p1 and p2
            -> space complexity O(1) => constant

        Solution of space complexity: O(1)


Step 8: Can we optimize our solution?

        T: O(N^2)       => horrible
        S: O(1)         => best

        Can we increase the space complexity and bring down the time complexity?

